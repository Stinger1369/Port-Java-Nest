package com.Portbil.portfolio_backend.controller;

import com.Portbil.portfolio_backend.dto.UserDTO;
import com.Portbil.portfolio_backend.entity.User;
import com.Portbil.portfolio_backend.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/users")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;

    /**
     * ‚úÖ R√©cup√©rer tous les utilisateurs
     * Accessible uniquement par un ADMIN
     */
    @GetMapping
    @PreAuthorize("hasAuthority('ADMIN')")
    public ResponseEntity<List<User>> getAllUsers() {
        System.out.println("üîπ R√©cup√©ration de la liste des utilisateurs.");
        return ResponseEntity.ok(userService.getAllUsers());
    }

    /**
     * ‚úÖ R√©cup√©rer un utilisateur par son ID
     * Accessible uniquement par un ADMIN ou l'utilisateur lui-m√™me
     */
    @GetMapping("/{id}")
    @PreAuthorize("hasAuthority('ADMIN') or #id == authentication.principal.username") // ‚úÖ V√©rifie avec le nom d'utilisateur (email ou ID)
    public ResponseEntity<User> getUserById(@PathVariable String id) {
        System.out.println("üîπ Tentative de r√©cup√©ration de l'utilisateur ID: " + id);

        Optional<User> user = userService.getUserById(id);
        if (user.isEmpty()) {
            System.out.println("‚ùå Utilisateur non trouv√© : " + id);
            return ResponseEntity.notFound().build();
        }

        System.out.println("‚úÖ Utilisateur trouv√© : " + user.get().getEmail());
        System.out.println("Phone renvoy√© au frontend : " + user.get().getPhone()); // Log pour v√©rifier
        return ResponseEntity.ok(user.get());
    }

    /**
     * ‚úÖ Modifier un utilisateur (V√©rification d'authentification ajout√©e)
     * Accessible uniquement par l'utilisateur concern√©
     */
    @PutMapping("/{id}")
    @PreAuthorize("#id == authentication.principal.username") // ‚úÖ V√©rifie si l'ID de l'utilisateur connect√© correspond
    public ResponseEntity<?> updateUser(@PathVariable String id, @RequestBody UserDTO userDTO) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        System.out.println("üîπ Tentative de mise √† jour de l'utilisateur ID: " + id);
        System.out.println("Received phone from frontend: " + userDTO.getPhone()); // Log avant traitement

        if (authentication == null || authentication.getPrincipal() == null) {
            System.out.println("‚ùå Utilisateur non authentifi√© !");
            return ResponseEntity.status(403).body("Acc√®s interdit : utilisateur non authentifi√© !");
        }

        String authenticatedUserId = authentication.getName(); // üîπ R√©cup√®re l'ID utilisateur stock√© dans SecurityContextHolder

        System.out.println("‚úÖ Utilisateur connect√© avec ID : " + authenticatedUserId);

        if (!authenticatedUserId.equals(id)) {
            System.out.println("‚ùå Erreur : L'utilisateur ne peut modifier que son propre compte !");
            return ResponseEntity.status(403).body("Acc√®s interdit : vous ne pouvez modifier que votre propre compte !");
        }

        try {
            Optional<User> updatedUser = userService.updateUser(id, userDTO);
            if (updatedUser.isEmpty()) {
                System.out.println("‚ùå Mise √† jour impossible, utilisateur non trouv√© : " + id);
                return ResponseEntity.notFound().build();
            }

            System.out.println("‚úÖ Mise √† jour r√©ussie pour l'utilisateur ID: " + id);
            System.out.println("Saved phone in DB: " + updatedUser.get().getPhone()); // Log apr√®s mise √† jour
            return ResponseEntity.ok(updatedUser.get());

        } catch (IllegalArgumentException e) {
            System.out.println("‚ö†Ô∏è Erreur lors de la mise √† jour : " + e.getMessage());
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    /**
     * ‚úÖ Supprimer un utilisateur
     * Accessible uniquement par un ADMIN ou l'utilisateur lui-m√™me
     */
    @DeleteMapping("/{id}")
    @PreAuthorize("hasAuthority('ADMIN') or #id == authentication.principal.username")
    public ResponseEntity<Void> deleteUser(@PathVariable String id) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        System.out.println("üîπ Tentative de suppression de l'utilisateur ID: " + id);

        if (authentication == null || authentication.getPrincipal() == null) {
            System.out.println("‚ùå Utilisateur non authentifi√© !");
            return ResponseEntity.status(403).build();
        }

        String authenticatedUserId = authentication.getName(); // üîπ L'ID de l'utilisateur connect√©

        System.out.println("‚úÖ Utilisateur connect√© avec ID : " + authenticatedUserId);

        if (!authenticatedUserId.equals(id) && !authentication.getAuthorities().stream()
                .anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals("ADMIN"))) {
            System.out.println("‚ùå Erreur : Acc√®s interdit !");
            return ResponseEntity.status(403).build();
        }

        try {
            userService.deleteUser(id);
            System.out.println("‚úÖ Suppression r√©ussie pour l'utilisateur ID: " + id);
            return ResponseEntity.noContent().build();
        } catch (IllegalArgumentException e) {
            System.out.println("‚ùå Erreur lors de la suppression : " + e.getMessage());
            return ResponseEntity.notFound().build();
        }
    }
}